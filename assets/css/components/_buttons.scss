
// Buttons Group

.buttons {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  gap: 1em;
  margin-top: 2em;
  > *:not(.button, button) {
    display: flex;
    gap: .25em;
  }
}


// Button

button,
.button {
  color: var(--base-text);
  background-color: transparent;
  position: relative;
  z-index: 0;
  &:before {
    content: '';
    background-image: none;
    z-index: -1;
  }
  &:before,
  &:after {
    transition: background-color .1s;
    background-color: var(--base);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    @if not $chamfer {
      z-index: -1;
    }
    // radius
    @if $radius > 0.01 or $buttons-rounded or $icon-buttons-rounded {
      @if $chamfer {
        clip-path: var(--chamfer);
      } @else {
        border-radius: var(--radius-end);
      }
    }
  }
  @if $buttons-rounded {
    --radius: 1.25em;
  }
  transition: color;
  background-image: none;
  border: none;
  // outline: none;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: .375em;
  padding: .5em 1.5em;
  min-height: 2.5em;
  > svg {
    font-size: 1.5em;
    color: var(--base-text);
    opacity: .75;
    transition: color .1s;
  }
  > i {
    @if $buttons-font-base {
      @if $font-weight-bold-base > 0 {
        @include font-base-bold;
        text-transform: uppercase;
      }
    } @else {
      @include font-title;
      text-transform: uppercase;
    }
    line-height: 1.25;
    text-align: left;
  }
  &:hover,
  &:focus {
    @include button-hover;
  }
  &:active {
    @include button-active;
  }
  @if $buttons-3d {
    transform: translateY(-.25em);
    &:after {
      content: '';
      filter: brightness(.75);
      transform: translateY(.25em);
      transition: background-color .1s, transform .1s;
      z-index: -2;
    }
    @if $chamfer {
      transition: color, filter, transform;
      filter: drop-shadow($shadow);
    } @else {
      transition: color, box-shadow, transform;
      &:after {
        box-shadow: $shadow;
      }
    }
  }
  transition-duration: .1s;
}


// Small

.button--sm {
  gap: .25em;
  padding: .25em 1em;
  min-height: 2em;
  @if $radius > 1 or $buttons-rounded {
    --radius: 1em;
  }
  > svg {
    font-size: 1.25em;
  }
}


// Icon

.button--icon {
  padding: .5em;
  width: 3em;
  height: 3em;
  line-height: 2;
  > svg {
    opacity: 1;
    font-size: 2em;
  }
  > i {
    @include ofuscate;
  }
  @if $icon-buttons-rounded {
    &:before,
    &:after {
      @include circle;
    }
    @if $chamfer {
      > svg {
        font-size: 1.5em;
      }
    }
  }
}


// Font Alternative

.button--font-alt {
  > i {
    @include font-base;
    line-height: 1.25;
    text-transform: none;
    @if $top-title != 0 {
      &:not(.aux) {
        transform: none;
      }
    }
  }
  &:not(.button, button) {
    > i {
      @if $buttons-font-base {
        @if $font-weight-bold-base > 0 {
          @include font-base-bold;
          text-transform: uppercase;
        }
      } @else {
        @include font-title;
        text-transform: uppercase;
      }
    }
  }
}


// Paginate

.sl-close,
.sl-prev,
.sl-next {
  &:after,
  &:before {
    content: none;
  }
}


// Border

@if $buttons-outline {
  button,
  .button {
    color: var(--text);
    > svg {
      opacity: 1;
      color: var(--base);
    }
    &:before,
    &:after {
      @if $chamfer and ($radius > 0.01 or $buttons-rounded or $icon-buttons-rounded) {
        clip-path: var(--chamfer-outline);
      } @else {
        border: var(--outline) var(--base) solid;
        background-color: transparent;
      }
    }
    @if $buttons-3d {
      &:after {
        opacity: .25;
      }
      @if $chamfer {
        filter: none;
      } @else {
        &:after {
          box-shadow: none;
          z-index: -2;
        }
      }
    }
  }
  .button--icon:not(:hover,:focus,:active) {
    > svg {
      color: var(--text);
    }
  }
  @if $chamfer and $icon-buttons-rounded {
    .button--icon {
      &:before,
      &:after {
        clip-path: var(--diamond-outline);
      }
    }
  }
  .menu__toggle,
  .callnow .button--icon,
  .button-google-translate .button--icon,
  .button-up .button--icon,
  .modal__back,
  .modal__close--corner {
    // --text: var(--base);
    // svg {
    //   color: var(--base);
    // }
    @if $chamfer and ($radius > 0.01 or $buttons-rounded or $icon-buttons-rounded) {
      i {
        @if $icon-buttons-rounded {
          clip-path: var(--diamond);
          top: var(--outline-diamond);
          left: var(--outline-diamond);
          width: calc(100% - var(--outline-diamond) * 2);
          height: calc(100% - var(--outline-diamond) * 2);
        } @else {
          clip-path: var(--chamfer-int-outline);
        }
        background-color: var(--bg-color);
      }
    } @else if {
      &:before {
        background-color: var(--bg-color);
      }
    }
  }
}